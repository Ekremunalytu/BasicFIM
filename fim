#!/bin/bash

# FIM System Launcher
# ===================
# Bu script tÃ¼m FIM operasyonlarÄ±nÄ± yÃ¶netir

set -e

# Script'in bulunduÄŸu dizini tespit et
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DOCKER_DIR="$SCRIPT_DIR/docker"
SCRIPTS_DIR="$SCRIPT_DIR/scripts"

# Renkli output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

show_help() {
    echo -e "${PURPLE}ðŸ”’ FIM (File Integrity Monitoring) System${NC}"
    echo "=============================================="
    echo ""
    echo "Usage: $0 <command> [options]"
    echo ""
    echo "Commands:"
    echo "  start [--production] [--clean]  Start FIM system"
    echo "  stop  [--production]            Stop FIM system"
    echo "  status                          Show system status"
    echo "  logs                            Show system logs"
    echo "  clean [--production]            Clean FIM system"
    echo "  help                            Show this help"
    echo ""
    echo "Options:"
    echo "  --production, -p                Use production configuration"
    echo "  --clean                         Clean start (remove existing containers)"
    echo ""
    echo "Examples:"
    echo "  $0 start                        Start in development mode"
    echo "  $0 start --production           Start in production mode"
    echo "  $0 stop                         Stop development environment"
    echo "  $0 clean --production           Clean production environment"
}

# Parse arguments
COMMAND=""
PRODUCTION_MODE=false
CLEAN_MODE=false
COMPOSE_FILE="docker-compose.yml"

while [[ $# -gt 0 ]]; do
    case $1 in
        start|stop|status|logs|clean|help)
            COMMAND="$1"
            shift
            ;;
        --production|--prod|-p)
            PRODUCTION_MODE=true
            COMPOSE_FILE="docker-compose.prod.yml"
            shift
            ;;
        --clean)
            CLEAN_MODE=true
            shift
            ;;
        *)
            echo "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac
done

# Set compose file path
COMPOSE_PATH="$DOCKER_DIR/$COMPOSE_FILE"

case $COMMAND in
    start)
        echo -e "${BLUE}Starting FIM system...${NC}"
        if [ "$CLEAN_MODE" = true ]; then
            "$SCRIPTS_DIR/start-fim.sh" --clean $([ "$PRODUCTION_MODE" = true ] && echo "--production")
        else
            "$SCRIPTS_DIR/start-fim.sh" $([ "$PRODUCTION_MODE" = true ] && echo "--production")
        fi
        ;;
    stop)
        echo -e "${YELLOW}Stopping FIM system...${NC}"
        cd "$SCRIPT_DIR"
        docker-compose -f "$COMPOSE_PATH" down
        ;;
    status)
        echo -e "${BLUE}FIM System Status:${NC}"
        cd "$SCRIPT_DIR"
        docker-compose -f "$COMPOSE_PATH" ps
        ;;
    logs)
        echo -e "${BLUE}FIM System Logs:${NC}"
        cd "$SCRIPT_DIR"
        docker-compose -f "$COMPOSE_PATH" logs -f
        ;;
    clean)
        echo -e "${RED}Cleaning FIM system...${NC}"
        "$SCRIPTS_DIR/cleanup-fim.sh" $([ "$PRODUCTION_MODE" = true ] && echo "--production")
        ;;
    help|"")
        show_help
        ;;
    *)
        echo "Unknown command: $COMMAND"
        show_help
        exit 1
        ;;
esac
